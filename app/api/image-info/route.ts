/** @format */

// app/api/image-info/route.ts

export async function GET(req: Request) {
  const { searchParams } = new URL(req.url);
  const file = searchParams.get("file");

  if (!file) {
    console.warn("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'file'");
    return new Response(JSON.stringify({ error: "Missing 'file' parameter" }), {
      status: 400,
    });
  }

  console.log("üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", file);

  const apiUrl = `https://en.wikipedia.org/w/api.php?action=query&titles=File:${encodeURIComponent(
    file
  )}&prop=imageinfo&iiprop=url&format=json&origin=*`;

  try {
    const res = await fetch(apiUrl);

    if (!res.ok) {
      console.error(`‚ùå Wikipedia API error: ${res.status} ${res.statusText}`);
      throw new Error(`Wikipedia API error: ${res.statusText}`);
    }

    const data = await res.json();

    const pages = data?.query?.pages;
    const firstPageKey = Object.keys(pages || {})[0];
    const page = pages?.[firstPageKey];

    const imageUrl = page?.imageinfo?.[0]?.url;

    if (!imageUrl) {
      console.warn("üö´ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Wikipedia API:", file);
      return new Response(JSON.stringify({ error: "Image not found" }), {
        status: 404,
      });
    }

    console.log("‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:", imageUrl);
    return new Response(JSON.stringify({ imageUrl }), {
      headers: { "Content-Type": "application/json" },
    });
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
    return new Response(
      JSON.stringify({ error: "Failed to fetch image info" }),
      { status: 500 }
    );
  }
}
