/** @format */

import { NextResponse } from "next/server";

export async function POST(req: Request) {
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey) {
    return NextResponse.json(
      { error: "API key not configured" },
      { status: 500 }
    );
  }

  const { breed } = await req.json();
  if (!breed || typeof breed !== "string") {
    return NextResponse.json({ error: "Invalid breed name" }, { status: 400 });
  }

  const prompt = `
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–±–∞–∫–∞–º. –î–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ **—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ** –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ JSON:

{
  "markdown": "...–æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã –≤ Markdown...",
  "imageWikiFile": "–§–∞–π–ª_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.jpg"
}

üìå –ü–æ–ª–µ "markdown" –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å:

- –ó–∞–≥–æ–ª–æ–≤–æ–∫: ## –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã
- –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (3‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
- –¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä
- –°—Ä–µ–¥–Ω—é—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏
- **–°—Å—ã–ª–∫–∏ –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏—é**:
  - [–†—É—Å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è](https://ru.wikipedia.org/wiki/...)
  - [–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≤–µ—Ä—Å–∏—è](https://uk.wikipedia.org/wiki/...)
  - [–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –≤–µ—Ä—Å–∏—è](https://en.wikipedia.org/wiki/...)

‚ö†Ô∏è –ù–µ –≤—Å—Ç–∞–≤–ª—è–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ markdown. –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–µ—Ä–Ω–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –ø–æ–ª–µ "imageWikiFile" (—Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞, –±–µ–∑ File: –∏ URL).

–û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ JSON. –ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥.
`;

//   const prompt = `
// –î–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä–æ–¥–µ —Å–æ–±–∞–∫ "${breed}" –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:

// {
//   "markdown": "...–æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown...",
//   "imageWikiFile": "–ù–∞–∑–≤–∞–Ω–∏–µ_—Ñ–∞–π–ª–∞.jpg"
// }

// üìå –ü—Ä–∞–≤–∏–ª–∞:
// - –ü–æ–ª–µ "markdown" –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏, —Å—Å—ã–ª–∫–∏ –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏—é ‚Äî –≤—Å—ë –≤ Markdown.
// - –ü–æ–ª–µ "imageWikiFile" –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏ (–±–µ–∑ File: –∏ –±–µ–∑ URL).
// - –ù–µ –≤—Å—Ç–∞–≤–ª—è–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ markdown. –¢–æ–ª—å–∫–æ JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞.
// - –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ. –ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥.
// `;

  try {
    const res = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${apiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4-turbo",
        messages: [
          {
            role: "system",
            content:
              "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON-–æ—Ç–≤–µ—Ç—ã –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.",
          },
          {
            role: "user",
            content: prompt,
          },
        ],
        temperature: 0.7,
      }),
    });

    if (!res.ok) {
      const errorText = await res.text();
      console.error("GPT error:", errorText);
      return NextResponse.json(
        { error: "GPT request failed" },
        { status: 500 }
      );
    }

    const data = await res.json();
    const raw = data.choices?.[0]?.message?.content;

    let parsed: { markdown: string; imageWikiFile?: string };
    try {
      parsed = JSON.parse(raw);
    } catch (err) {
      console.error("‚ùå GPT –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON:", raw);
      return NextResponse.json(
        { error: "Invalid JSON from GPT" },
        { status: 500 }
      );
    }

    const { markdown, imageWikiFile } = parsed;

    let imageUrl: string | null = null;
    if (imageWikiFile) {
      try {
        const wikiRes = await fetch(
          `https://en.wikipedia.org/w/api.php?action=query&titles=File:${encodeURIComponent(
            imageWikiFile
          )}&prop=imageinfo&iiprop=url&format=json&origin=*`
        );
        const wikiData = await wikiRes.json();
        const pages = wikiData?.query?.pages;
        const page = pages[Object.keys(pages)[0]];
        imageUrl = page?.imageinfo?.[0]?.url || null;
      } catch (e) {
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è imageinfo –æ—Ç –í–∏–∫–∏–ø–µ–¥–∏–∏:", e);
      }
    }

    return NextResponse.json({ markdown, imageUrl });
  } catch (error) {
    console.error("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
    return NextResponse.json(
      { error: "Failed to fetch from ChatGPT" },
      { status: 500 }
    );
  }
}

// /** @format */

// import { NextResponse } from "next/server";

// export async function POST(req: Request) {
//   // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API-–∫–ª—é—á–∞
//   const apiKey = process.env.OPENAI_API_KEY;
//   if (!apiKey) {
//     console.error("OPENAI_API_KEY is not set");
//     return NextResponse.json(
//       { error: "Server configuration error: API key is missing" },
//       { status: 500 }
//     );
//   }

//   // 2. –†–∞–∑–±–æ—Ä –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
//   let breedData: { breed?: unknown };
//   try {
//     breedData = await req.json();
//   } catch {
//     return NextResponse.json({ error: "Invalid JSON" }, { status: 400 });
//   }

//   const { breed } = breedData;
//   if (typeof breed !== "string" || !breed.trim() || breed.length > 100) {
//     return NextResponse.json({ error: "Invalid breed name" }, { status: 400 });
//   }

//   // 3. –ü—Ä–æ–º—Ç —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π markdown + –∫–∞—Ä—Ç–∏–Ω–∫–∏
//   const gptPrompt = `–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä–æ–¥–µ —Å–æ–±–∞–∫ "${breed}" –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown. –í–∫–ª—é—á–∏:
// 1. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
// 2. –û—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏ —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–∞
// 3. –°—Ä–µ–¥–Ω—é—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏
// 4. –°—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏:
//    - [–†—É—Å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è](https://ru.wikipedia.org/wiki/...)
//    - [–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≤–µ—Ä—Å–∏—è](https://uk.wikipedia.org/wiki/...)
// 5. Markdown-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ![${breed}](https://...)

// –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å:
// - https://cdn2.thedogapi.com
// - https://upload.wikimedia.org
// - https://images.unsplash.com

// –ù–µ –≤—Å—Ç–∞–≤–ª—è–π —Å—Å—ã–ª–∫–∏ —Å File: –∏–ª–∏ Wikimedia Commons –≤ —Ñ–æ—Ä–º–∞—Ç–µ "File:..."`;

//   // 4. –¢–∞–π–º–∞—É—Ç –∏ –≤—ã–∑–æ–≤ OpenAI
//   const controller = new AbortController();
//   const timeout = setTimeout(() => controller.abort(), 15000);

//   try {
//     const res = await fetch("https://api.openai.com/v1/chat/completions", {
//       signal: controller.signal,
//       method: "POST",
//       headers: {
//         Authorization: `Bearer ${apiKey}`,
//         "Content-Type": "application/json",
//       },
//       body: JSON.stringify({
//         model: "gpt-4-turbo",
//         messages: [
//           {
//             role: "system",
//             content:
//               "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä–æ–¥–∞—Ö —Å–æ–±–∞–∫ —Å —Å—Å—ã–ª–∫–∞–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.",
//           },
//           {
//             role: "user",
//             content: gptPrompt,
//           },
//         ],
//         temperature: 0.7,
//       }),
//     });

//     clearTimeout(timeout);

//     if (!res.ok) {
//       const errText = await res.text();
//       console.error(`OpenAI API returned ${res.status}: ${errText}`);
//       return NextResponse.json(
//         { error: `OpenAI API error ${res.status}` },
//         { status: res.status }
//       );
//     }

//     const data = await res.json();
//     const content = data.choices?.[0]?.message?.content || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";

//     const imageUrlMatch = content.match(/!\[.*?\]\((.*?)\)/);
//     const imageUrl = imageUrlMatch ? imageUrlMatch[1] : null;
//     console.log("üê∂ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", imageUrl);

//     return NextResponse.json({
//       markdown: content,
//       imageUrl,
//     });
//   } catch (err: any) {
//     clearTimeout(timeout);
//     console.error("‚ùå OpenAI fetch error:", err);
//     const status = err.name === "AbortError" ? 504 : 500;
//     return NextResponse.json(
//       { error: err.message || "Failed to fetch from OpenAI" },
//       { status }
//     );
//   }
// }
